package org.sevenstar.monitor.database.filter.jdbc;

import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.sevenstar.monitor.database.context.SQLContext;
import org.sevenstar.monitor.database.toolkit.jdbc.filter.IPreparedStatementFilter;

public class PreparedStatementFilterImpl implements IPreparedStatementFilter {

	private static Log LOG = LogFactory
			.getLog(PreparedStatementFilterImpl.class);

	private static List stringList;

	private static List numberList;

	private String sql;

	static {
		stringList = new ArrayList();
		stringList.add(String.class.getName());
		stringList.add(java.lang.Character.class.getName());
		numberList = new ArrayList();
		numberList.add(Long.class.getName());
		numberList.add(Integer.class.getName());
		numberList.add(Double.class.getName());
		numberList.add(Float.class.getName());
	}

	private List paramList;

	public List getParamList() {
		return paramList;
	}

	public void setParamList(List paramList) {
		this.paramList = paramList;
	}

	public static void main(String[] args) {
		String sql = "insert into staff(user_id,name,passwd) values(4,?,?)";
		sql = sql.replaceFirst("\\?", "'ll'");
		System.out.println(sql);
	}

	private String dateToStringCommon(Date date) {
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			return df.format(date);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	private String prepareSql(PreparedStatement preparedStatement, String sql) {
		try {
			ParameterMetaData metaData = preparedStatement
					.getParameterMetaData();
			for (int i = 0; i < metaData.getParameterCount(); i++) {
				if(i >= paramList.size()){
					sql = sql.replaceAll("\\?", "null");
					continue;
				}
				Object paramValue = paramList.get(i);
				if (paramValue == null && sql.indexOf("?") != -1) {
					sql = sql.replaceFirst("\\?", "null");
				} else {
					try {
						if (stringList
								.contains(paramValue.getClass().getName())
								&& sql.indexOf("?") != -1) {
							sql = sql.replaceFirst("\\?", "'" + paramValue
									+ "'");
						} else if (numberList.contains(paramValue
								.getClass().getName())
								&& sql.indexOf("?") != -1) {
							sql = sql.replaceFirst("\\?", "" + paramValue);
						} else if ((Date.class.getName()).equals(paramValue
								.getClass().getName())
								&& sql.indexOf("?") != -1) {
							sql = sql.replaceFirst("\\?", "to_date('"
									+ dateToStringCommon((Date) paramValue)
									+ "','yyyy-mm-dd HH:MM:SS')");
						} else if (sql.indexOf("?") != -1) {
							sql = sql.replaceFirst("\\?", "'UNKNOWTYPE'");
						}
					} catch (Exception e) {
						sql = sql.replaceFirst("\\?", "'UNKNOWTYPE'");
						LOG.error(e);
					}
				}
			}
			return sql;
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}

	public boolean execute(PreparedStatement preparedStatement)
			throws SQLException {
		SQLContext.push(prepareSql(preparedStatement, this.getSql()));
		return preparedStatement.execute();
	}

	public boolean execute(PreparedStatement preparedStatement, String sql)
			throws SQLException {
		SQLContext.push(prepareSql(preparedStatement, sql));
		return preparedStatement.execute(sql);
	}

	public boolean execute(PreparedStatement preparedStatement, String sql,
			int autoGeneratedKeys) throws SQLException {
		SQLContext.push(prepareSql(preparedStatement, sql));
		return preparedStatement.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(PreparedStatement preparedStatement, String sql,
			int[] columnIndexes) throws SQLException {
		SQLContext.push(prepareSql(preparedStatement, sql));
		return preparedStatement.execute(sql, columnIndexes);
	}

	public boolean execute(PreparedStatement preparedStatement, String sql,
			String[] columnNames) throws SQLException {
		SQLContext.push(prepareSql(preparedStatement, sql));
		return preparedStatement.execute(sql, columnNames);
	}

	public int[] executeBatch(PreparedStatement preparedStatement)
			throws SQLException {
		return preparedStatement.executeBatch();
	}

	public ResultSet executeQuery(PreparedStatement preparedStatement)
			throws SQLException {
		SQLContext.push(prepareSql(preparedStatement, this.getSql()));
		return preparedStatement.executeQuery();
	}

	public ResultSet executeQuery(PreparedStatement preparedStatement,
			String sql) throws SQLException {
		SQLContext.push(prepareSql(preparedStatement, this.getSql()));
		return preparedStatement.executeQuery(sql);
	}

	public int executeUpdate(PreparedStatement preparedStatement)
			throws SQLException {
		SQLContext.push(prepareSql(preparedStatement, this.getSql()));
		return preparedStatement.executeUpdate();
	}

	public int executeUpdate(PreparedStatement preparedStatement, String sql)
			throws SQLException {
		SQLContext.push(prepareSql(preparedStatement, sql));
		return preparedStatement.executeUpdate(sql);
	}

	public int executeUpdate(PreparedStatement preparedStatement, String sql,
			int autoGeneratedKeys) throws SQLException {
		SQLContext.push(prepareSql(preparedStatement, sql));
		return preparedStatement.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(PreparedStatement preparedStatement, String sql,
			int[] columnIndexes) throws SQLException {
		SQLContext.push(prepareSql(preparedStatement, sql));
		return preparedStatement.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(PreparedStatement preparedStatement, String sql,
			String[] columnNames) throws SQLException {
		SQLContext.push(prepareSql(preparedStatement, sql));
		return preparedStatement.executeUpdate(sql, columnNames);
	}

	public String getSql() {
		return this.sql;
	}

	public void setSql(String sql) {
		this.sql = sql;
	}

}
